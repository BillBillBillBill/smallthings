#!/usr/bin/env python# -*- coding: utf-8 -*-import pymysqlimport osimport redisimport contextlibhost = os.getenv("APP_HOST", "localhost")port = int(os.getenv("APP_PORT", "8080"))DB_HOST = os.getenv("DB_HOST", "localhost")DB_PORT = int(os.getenv("DB_PORT", "3306"))DB_NAME = os.getenv("DB_NAME", "eleme")DB_USER = os.getenv("DB_USER", "root")DB_PASS = os.getenv("DB_PASS", "toor")REDIS_HOST = os.getenv("REDIS_HOST", "localhost")REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))pool0 = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=0)r0 = redis.Redis(connection_pool=pool0)# pool1 = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=1)# r1 = redis.Redis(connection_pool=pool1)# pool2 = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=2)# r2 = redis.Redis(connection_pool=pool2)@contextlib.contextmanagerdef db_query():    db = pymysql.connect(host=os.getenv("DB_HOST", "localhost"),                         port=int(os.getenv("DB_PORT", 3306)),                         user=os.getenv("DB_USER", "root"),                         passwd=os.getenv("DB_PASS", "toor"),                         db=os.getenv("DB_NAME", "eleme"))    try:        yield db    finally:        db.close()# def load_users():#     users = {}#     with db_query() as db:#         cur = db.cursor()#         # load users#         cur.execute("SELECT id, name, password FROM user")#         for i, name, pw in cur.fetchall():#             r1.hset(name, 'user_id', i)#             r1.hset(name, 'password', pw)def load_foods():    foods = []    with db_query() as db:        cur = db.cursor()        cur.execute("SELECT id, stock, price FROM food")        for i, stock, price in cur.fetchall():            r0.set(str(i) + ':price', price)            r0.set(str(i), stock)            #r2.hset(str(i) + ':info', 'id', i)def config_redis():    r0.config_set("loglevel", "warning")    r0.config_set("save", "")    r0.config_set("appendfsync", "no")    r0.config_set("slowlog-log-slower-than", 1000000)if __name__ == '__main__':    r0.flushall()    #r1.flushall()    #r2.flushall()    #config_redis()    #load_users()    load_foods()    #print r2.pipeline().hgetall("1:info").get(1).execute()    #print r2.keys()    #stock = r2.lindex('1', 0)    #stock = int(stock) - 10    #r2.lset('1', 0, stock)    #print r2.lindex('1', 0)